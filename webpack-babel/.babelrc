{
    "presets": [
        [
          "@babel/preset-env",
            {
            "modules": false, // "amd" | "umd" | "systemjs" | "commonjs" | "cjs" | false, defaults to "commonjs". 转换 es6 模块语法到其他 模块规范， false不会转换
            "useBuiltIns": "false",
            "loose": false, // 默认值 false， Babel 默认使用 strict 模式；
            "debug": true, //  默认值 false， 调试模式，会打印转换时的一些信息；
            "targets": { // 当前项目所支持的浏览器配置
                "browsers": [
                    "last 2 versions",
                    "Firefox ESR",
                    "> 1%",
                    "ie >= 9",
                    "iOS >= 8",
                    "Android >= 4",
                ]
            },
            "corejs": 3,
            "include": [], // 如果你 使用了某个新特性（如es6.array.from），无论browserslist 如何你都想 转化它， 则 include: ['es6.array.from']
            "exclude": []
          }
        ]
    ]
    ,"plugins": [
      ["@babel/plugin-transform-runtime", {
        "corejs": 3, // 默认false, 是否转化 内置函数(如：Promise, Set, Symbol) 或者 静态方法(如：Object.assign, Array.from)
        "regenerator": true, // 默认true, 默认情况下回根据 browserslist 来确认是否转化 generator 函数 或 async 函数，如果 @babel/preset-env -> ignoreBrowserslistConfig = true 则都转换 generator 和 async 语法。
        "helpers": true, // 默认true, 是否将内联的 babel helpers 代码抽离到单独的 module 文件，避免内联的 helper 代码在多个文件重复出现。
        "useESModules": true // 使用 es modules helpers, 减少 commonJS 语法代码
      }]
    ]
}

